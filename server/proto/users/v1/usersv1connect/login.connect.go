// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/login.proto

package usersv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/DaanV2/mechanus/server/proto/users/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LoginServiceName is the fully-qualified name of the LoginService service.
	LoginServiceName = "users.v1.LoginService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LoginServiceLoginProcedure is the fully-qualified name of the LoginService's Login RPC.
	LoginServiceLoginProcedure = "/users.v1.LoginService/Login"
	// LoginServiceRefreshProcedure is the fully-qualified name of the LoginService's Refresh RPC.
	LoginServiceRefreshProcedure = "/users.v1.LoginService/Refresh"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	loginServiceServiceDescriptor       = v1.File_users_v1_login_proto.Services().ByName("LoginService")
	loginServiceLoginMethodDescriptor   = loginServiceServiceDescriptor.Methods().ByName("Login")
	loginServiceRefreshMethodDescriptor = loginServiceServiceDescriptor.Methods().ByName("Refresh")
)

// LoginServiceClient is a client for the users.v1.LoginService service.
type LoginServiceClient interface {
	// Log in the user, returns a JWT token
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Refresh a given token, with a new JWT token
	Refresh(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewLoginServiceClient constructs a client for the users.v1.LoginService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoginServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LoginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &loginServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+LoginServiceLoginProcedure,
			connect.WithSchema(loginServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refresh: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+LoginServiceRefreshProcedure,
			connect.WithSchema(loginServiceRefreshMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// loginServiceClient implements LoginServiceClient.
type loginServiceClient struct {
	login   *connect.Client[v1.LoginRequest, v1.LoginResponse]
	refresh *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
}

// Login calls users.v1.LoginService.Login.
func (c *loginServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Refresh calls users.v1.LoginService.Refresh.
func (c *loginServiceClient) Refresh(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refresh.CallUnary(ctx, req)
}

// LoginServiceHandler is an implementation of the users.v1.LoginService service.
type LoginServiceHandler interface {
	// Log in the user, returns a JWT token
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Refresh a given token, with a new JWT token
	Refresh(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewLoginServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoginServiceHandler(svc LoginServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	loginServiceLoginHandler := connect.NewUnaryHandler(
		LoginServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(loginServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	loginServiceRefreshHandler := connect.NewUnaryHandler(
		LoginServiceRefreshProcedure,
		svc.Refresh,
		connect.WithSchema(loginServiceRefreshMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/users.v1.LoginService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LoginServiceLoginProcedure:
			loginServiceLoginHandler.ServeHTTP(w, r)
		case LoginServiceRefreshProcedure:
			loginServiceRefreshHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLoginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoginServiceHandler struct{}

func (UnimplementedLoginServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.LoginService.Login is not implemented"))
}

func (UnimplementedLoginServiceHandler) Refresh(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.LoginService.Refresh is not implemented"))
}
