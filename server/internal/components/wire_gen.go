// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package components

import (
	"context"
	"github.com/DaanV2/mechanus/server/internal/grpc"
	"github.com/DaanV2/mechanus/server/internal/web"
	"github.com/DaanV2/mechanus/server/pkg/application"
	"github.com/DaanV2/mechanus/server/pkg/authenication"
	"github.com/DaanV2/mechanus/server/pkg/database"
	"github.com/DaanV2/mechanus/server/pkg/grpc/gen/users/v1/usersv1connect"
	"github.com/DaanV2/mechanus/server/pkg/grpc/rpcs/rpcs_users"
	"github.com/DaanV2/mechanus/server/pkg/networking/mdns"
	"github.com/DaanV2/mechanus/server/pkg/servers"
	"github.com/DaanV2/mechanus/server/pkg/services/users"
	"github.com/DaanV2/mechanus/server/pkg/storage"
	"github.com/google/wire"
)

// Injectors from wire.go:

func BuildServer(ctx context.Context) (*Server, error) {
	v, err := GetDatabaseOptions()
	if err != nil {
		return nil, err
	}
	db, err := SetupDatabase(v...)
	if err != nil {
		return nil, err
	}
	service := user_service.NewService(db)
	jtiService := authenication.NewJTIService(db)
	storageProvider := provideKeyStorage(db)
	keyManager, err := authenication.NewKeyManager(storageProvider)
	if err != nil {
		return nil, err
	}
	jwtService := authenication.NewJWTService(jtiService, keyManager)
	loginService := rpcs_users.NewLoginService(service, jwtService)
	userService := rpcs_users.NewUserService(service)
	rpcs := grpc.RPCS{
		Login: loginService,
		User:  userService,
		JWT:   jwtService,
	}
	componentManager := application.NewComponentManager()
	webServices := web.WEBServices{
		Components: componentManager,
	}
	manager, err := createServerManager(ctx, rpcs, webServices)
	if err != nil {
		return nil, err
	}
	server := &Server{
		Manager: manager,
		Users:   service,
		DB:      db,
	}
	return server, nil
}

// wire.go:

type Server struct {
	Manager *servers.Manager
	Users   *user_service.Service
	DB      *database.DB
}

var dbSet = wire.NewSet(
	SetupDatabase,
	GetDatabaseOptions,
)

var servicesSet = wire.NewSet(application.NewComponentManager, rpcs_users.NewLoginService, rpcs_users.NewUserService, wire.Bind(new(usersv1connect.LoginServiceHandler), new(*rpcs_users.LoginService)), wire.Bind(new(usersv1connect.UserServiceHandler), new(*rpcs_users.UserService)), user_service.NewService, authenication.NewJWTService, authenication.NewJTIService, authenication.NewKeyManager, provideKeyStorage)

func createServerManager(ctx context.Context, rpcs grpc.RPCS, serv web.WEBServices) (*servers.Manager, error) {
	wconf := web.GetConfig()
	gconf := grpc.GetConfig()
	mconf := mdns.GetServerConfig(wconf.Port)
	s, err := MDNSServer(ctx, mconf)
	if err != nil {
		return nil, err
	}

	return ServerManager(
		APIServer(gconf, rpcs),
		WebServer(wconf, serv),
		s,
	), nil
}

func provideKeyStorage(db *database.DB) storage.StorageProvider[*authenication.KeyData] {
	return storage.DBStorage[*authenication.KeyData](db)
}
