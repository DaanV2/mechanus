// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file screens/v1/client.proto (package screens.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Ping } from "./general_pb.js";

/**
 * @generated from message screens.v1.ClientMessages
 */
export class ClientMessages extends Message<ClientMessages> {
  /**
   * @generated from field: repeated screens.v1.ClientMessage action = 1;
   */
  action: ClientMessage[] = [];

  constructor(data?: PartialMessage<ClientMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ClientMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "message", T: ClientMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientMessages {
    return new ClientMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientMessages {
    return new ClientMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientMessages {
    return new ClientMessages().fromJsonString(jsonString, options);
  }

  static equals(a: ClientMessages | PlainMessage<ClientMessages> | undefined, b: ClientMessages | PlainMessage<ClientMessages> | undefined): boolean {
    return proto3.util.equals(ClientMessages, a, b);
  }
}

/**
 * @generated from message screens.v1.ClientMessage
 */
export class ClientMessage extends Message<ClientMessage> {
  /**
   * Unique identifier for the message, in case request <-> response matching is needed.
   *
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from oneof screens.v1.ClientMessage.action
   */
  action: {
    /**
     * @generated from field: screens.v1.InitialSetupRequest initial_setup_request = 2;
     */
    value: InitialSetupRequest;
    case: "initialSetupRequest";
  } | {
    /**
     * @generated from field: screens.v1.Ping ping = 3;
     */
    value: Ping;
    case: "ping";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClientMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ClientMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "initial_setup_request", kind: "message", T: InitialSetupRequest, oneof: "action" },
    { no: 3, name: "ping", kind: "message", T: Ping, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientMessage {
    return new ClientMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientMessage {
    return new ClientMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientMessage {
    return new ClientMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ClientMessage | PlainMessage<ClientMessage> | undefined, b: ClientMessage | PlainMessage<ClientMessage> | undefined): boolean {
    return proto3.util.equals(ClientMessage, a, b);
  }
}

/**
 * @generated from message screens.v1.InitialSetupRequest
 */
export class InitialSetupRequest extends Message<InitialSetupRequest> {
  constructor(data?: PartialMessage<InitialSetupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.InitialSetupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitialSetupRequest {
    return new InitialSetupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitialSetupRequest {
    return new InitialSetupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitialSetupRequest {
    return new InitialSetupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitialSetupRequest | PlainMessage<InitialSetupRequest> | undefined, b: InitialSetupRequest | PlainMessage<InitialSetupRequest> | undefined): boolean {
    return proto3.util.equals(InitialSetupRequest, a, b);
  }
}

