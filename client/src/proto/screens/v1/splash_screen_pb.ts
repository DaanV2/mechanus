// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file screens/v1/splash_screen.proto (package screens.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message screens.v1.SplashScreen
 */
export class SplashScreen extends Message<SplashScreen> {
  /**
   * @generated from field: bool show = 1;
   */
  show = false;

  /**
   * @generated from field: optional string title = 2;
   */
  title?: string;

  /**
   * @generated from field: optional string subtitle = 3;
   */
  subtitle?: string;

  /**
   * @generated from field: optional string background_hex = 4;
   */
  backgroundHex?: string;

  constructor(data?: PartialMessage<SplashScreen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.SplashScreen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "show", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "subtitle", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "background_hex", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SplashScreen {
    return new SplashScreen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SplashScreen {
    return new SplashScreen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SplashScreen {
    return new SplashScreen().fromJsonString(jsonString, options);
  }

  static equals(a: SplashScreen | PlainMessage<SplashScreen> | undefined, b: SplashScreen | PlainMessage<SplashScreen> | undefined): boolean {
    return proto3.util.equals(SplashScreen, a, b);
  }
}

