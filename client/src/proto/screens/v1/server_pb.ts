// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file screens/v1/server.proto (package screens.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SplashScreen } from "./splash_screen_pb.js";
import { SceneChange, SceneChangeCompleted } from "./scene_actions_pb.js";

/**
 * @generated from message screens.v1.ServerMessages
 */
export class ServerMessages extends Message<ServerMessages> {
  /**
   * @generated from field: repeated screens.v1.ServerMessage action = 1;
   */
  action: ServerMessage[] = [];

  constructor(data?: PartialMessage<ServerMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ServerMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "message", T: ServerMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessages {
    return new ServerMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessages {
    return new ServerMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessages {
    return new ServerMessages().fromJsonString(jsonString, options);
  }

  static equals(a: ServerMessages | PlainMessage<ServerMessages> | undefined, b: ServerMessages | PlainMessage<ServerMessages> | undefined): boolean {
    return proto3.util.equals(ServerMessages, a, b);
  }
}

/**
 * @generated from message screens.v1.ServerMessage
 */
export class ServerMessage extends Message<ServerMessage> {
  /**
   * Unique identifier for the message, in case request <-> response matching is needed.
   *
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from oneof screens.v1.ServerMessage.action
   */
  action: {
    /**
     * @generated from field: screens.v1.SplashScreen splash_screen_update = 2;
     */
    value: SplashScreen;
    case: "splashScreenUpdate";
  } | {
    /**
     * @generated from field: screens.v1.SceneChange scene_change = 3;
     */
    value: SceneChange;
    case: "sceneChange";
  } | {
    /**
     * @generated from field: screens.v1.SceneChangeCompleted scene_change_completed = 4;
     */
    value: SceneChangeCompleted;
    case: "sceneChangeCompleted";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ServerMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "splash_screen_update", kind: "message", T: SplashScreen, oneof: "action" },
    { no: 3, name: "scene_change", kind: "message", T: SceneChange, oneof: "action" },
    { no: 4, name: "scene_change_completed", kind: "message", T: SceneChangeCompleted, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessage {
    return new ServerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ServerMessage | PlainMessage<ServerMessage> | undefined, b: ServerMessage | PlainMessage<ServerMessage> | undefined): boolean {
    return proto3.util.equals(ServerMessage, a, b);
  }
}

