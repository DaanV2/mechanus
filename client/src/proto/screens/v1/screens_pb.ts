// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file screens/v1/screens.proto (package screens.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SplashScreen } from "./splash_screen_pb.js";
import { SceneChange, SceneChangeCompleted } from "./scene_actions_pb.js";

/**
 * @generated from enum screens.v1.ScreenRole
 */
export enum ScreenRole {
  /**
   * @generated from enum value: SCREEN_ROLE_UNKNOWN_UNSPECIFIED = 0;
   */
  UNKNOWN_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SCREEN_ROLE_DEVICE = 1;
   */
  DEVICE = 1,

  /**
   * @generated from enum value: SCREEN_ROLE_VIEWER = 2;
   */
  VIEWER = 2,

  /**
   * @generated from enum value: SCREEN_ROLE_PLAYER = 3;
   */
  PLAYER = 3,

  /**
   * @generated from enum value: SCREEN_ROLE_OPERATOR = 4;
   */
  OPERATOR = 4,

  /**
   * @generated from enum value: SCREEN_ROLE_ADMIN = 5;
   */
  ADMIN = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ScreenRole)
proto3.util.setEnumType(ScreenRole, "screens.v1.ScreenRole", [
  { no: 0, name: "SCREEN_ROLE_UNKNOWN_UNSPECIFIED" },
  { no: 1, name: "SCREEN_ROLE_DEVICE" },
  { no: 2, name: "SCREEN_ROLE_VIEWER" },
  { no: 3, name: "SCREEN_ROLE_PLAYER" },
  { no: 4, name: "SCREEN_ROLE_OPERATOR" },
  { no: 5, name: "SCREEN_ROLE_ADMIN" },
]);

/**
 * @generated from message screens.v1.ScreenListenRequest
 */
export class ScreenListenRequest extends Message<ScreenListenRequest> {
  /**
   * @generated from field: screens.v1.ScreenRole role = 1;
   */
  role = ScreenRole.UNKNOWN_UNSPECIFIED;

  /**
   * For certain roles a identifiying token is required
   *
   * @generated from field: optional string token = 2;
   */
  token?: string;

  /**
   * For certain roles (such as devices) and identifier is needed
   *
   * @generated from field: optional string id = 3;
   */
  id?: string;

  constructor(data?: PartialMessage<ScreenListenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ScreenListenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "enum", T: proto3.getEnumType(ScreenRole) },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScreenListenRequest {
    return new ScreenListenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScreenListenRequest {
    return new ScreenListenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScreenListenRequest {
    return new ScreenListenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ScreenListenRequest | PlainMessage<ScreenListenRequest> | undefined, b: ScreenListenRequest | PlainMessage<ScreenListenRequest> | undefined): boolean {
    return proto3.util.equals(ScreenListenRequest, a, b);
  }
}

/**
 * @generated from message screens.v1.ScreenUpdate
 */
export class ScreenUpdate extends Message<ScreenUpdate> {
  /**
   * @generated from field: repeated screens.v1.ScreenAction action = 1;
   */
  action: ScreenAction[] = [];

  constructor(data?: PartialMessage<ScreenUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ScreenUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "message", T: ScreenAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScreenUpdate {
    return new ScreenUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScreenUpdate {
    return new ScreenUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScreenUpdate {
    return new ScreenUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ScreenUpdate | PlainMessage<ScreenUpdate> | undefined, b: ScreenUpdate | PlainMessage<ScreenUpdate> | undefined): boolean {
    return proto3.util.equals(ScreenUpdate, a, b);
  }
}

/**
 * @generated from message screens.v1.ScreenAction
 */
export class ScreenAction extends Message<ScreenAction> {
  /**
   * @generated from oneof screens.v1.ScreenAction.action
   */
  action: {
    /**
     * @generated from field: screens.v1.SplashScreen splash_screen = 1;
     */
    value: SplashScreen;
    case: "splashScreen";
  } | {
    /**
     * @generated from field: screens.v1.SceneChange scene_change = 2;
     */
    value: SceneChange;
    case: "sceneChange";
  } | {
    /**
     * @generated from field: screens.v1.SceneChangeCompleted scene_change_completed = 3;
     */
    value: SceneChangeCompleted;
    case: "sceneChangeCompleted";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ScreenAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ScreenAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "splash_screen", kind: "message", T: SplashScreen, oneof: "action" },
    { no: 2, name: "scene_change", kind: "message", T: SceneChange, oneof: "action" },
    { no: 3, name: "scene_change_completed", kind: "message", T: SceneChangeCompleted, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScreenAction {
    return new ScreenAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScreenAction {
    return new ScreenAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScreenAction {
    return new ScreenAction().fromJsonString(jsonString, options);
  }

  static equals(a: ScreenAction | PlainMessage<ScreenAction> | undefined, b: ScreenAction | PlainMessage<ScreenAction> | undefined): boolean {
    return proto3.util.equals(ScreenAction, a, b);
  }
}

