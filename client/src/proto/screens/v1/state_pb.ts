// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file screens/v1/state.proto (package screens.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { SplashScreen } from "./splash_screen_pb.js";

/**
 * @generated from message screens.v1.ScreenState
 */
export class ScreenState extends Message<ScreenState> {
  /**
   * @generated from field: screens.v1.Environment environment = 1;
   */
  environment?: Environment;

  /**
   * @generated from field: screens.v1.GridSettings grid = 2;
   */
  grid?: GridSettings;

  /**
   * @generated from field: repeated screens.v1.Layer layer = 3;
   */
  layer: Layer[] = [];

  /**
   * @generated from field: optional screens.v1.SplashScreen splash_screen = 20;
   */
  splashScreen?: SplashScreen;

  constructor(data?: PartialMessage<ScreenState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.ScreenState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment", kind: "message", T: Environment },
    { no: 2, name: "grid", kind: "message", T: GridSettings },
    { no: 3, name: "layer", kind: "message", T: Layer, repeated: true },
    { no: 20, name: "splash_screen", kind: "message", T: SplashScreen, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScreenState {
    return new ScreenState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScreenState {
    return new ScreenState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScreenState {
    return new ScreenState().fromJsonString(jsonString, options);
  }

  static equals(a: ScreenState | PlainMessage<ScreenState> | undefined, b: ScreenState | PlainMessage<ScreenState> | undefined): boolean {
    return proto3.util.equals(ScreenState, a, b);
  }
}

/**
 * @generated from message screens.v1.Environment
 */
export class Environment extends Message<Environment> {
  /**
   * @generated from field: google.protobuf.Timestamp current_time = 1;
   */
  currentTime?: Timestamp;

  /**
   * @generated from field: string background_color = 2;
   */
  backgroundColor = "";

  /**
   * @generated from field: double light_intensity = 3;
   */
  lightIntensity = 0;

  constructor(data?: PartialMessage<Environment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.Environment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_time", kind: "message", T: Timestamp },
    { no: 2, name: "background_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "light_intensity", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Environment {
    return new Environment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJsonString(jsonString, options);
  }

  static equals(a: Environment | PlainMessage<Environment> | undefined, b: Environment | PlainMessage<Environment> | undefined): boolean {
    return proto3.util.equals(Environment, a, b);
  }
}

/**
 * @generated from message screens.v1.GridSettings
 */
export class GridSettings extends Message<GridSettings> {
  /**
   * @generated from field: int32 x_offset = 1;
   */
  xOffset = 0;

  /**
   * @generated from field: int32 y_offset = 2;
   */
  yOffset = 0;

  /**
   * @generated from field: int32 x_ratio = 3;
   */
  xRatio = 0;

  /**
   * @generated from field: int32 y_ratio = 4;
   */
  yRatio = 0;

  constructor(data?: PartialMessage<GridSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.GridSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x_offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "y_offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "x_ratio", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "y_ratio", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GridSettings {
    return new GridSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GridSettings {
    return new GridSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GridSettings {
    return new GridSettings().fromJsonString(jsonString, options);
  }

  static equals(a: GridSettings | PlainMessage<GridSettings> | undefined, b: GridSettings | PlainMessage<GridSettings> | undefined): boolean {
    return proto3.util.equals(GridSettings, a, b);
  }
}

/**
 * @generated from message screens.v1.Layer
 */
export class Layer extends Message<Layer> {
  /**
   * @generated from field: repeated screens.v1.Entity entity = 1;
   */
  entity: Entity[] = [];

  constructor(data?: PartialMessage<Layer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.Layer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity", kind: "message", T: Entity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Layer {
    return new Layer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Layer {
    return new Layer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Layer {
    return new Layer().fromJsonString(jsonString, options);
  }

  static equals(a: Layer | PlainMessage<Layer> | undefined, b: Layer | PlainMessage<Layer> | undefined): boolean {
    return proto3.util.equals(Layer, a, b);
  }
}

/**
 * @generated from message screens.v1.Entity
 */
export class Entity extends Message<Entity> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: screens.v1.Asset asset = 2;
   */
  asset?: Asset;

  /**
   * @generated from field: screens.v1.Vector2 position = 3;
   */
  position?: Vector2;

  /**
   * @generated from field: screens.v1.Vector2 scale = 4;
   */
  scale?: Vector2;

  /**
   * @generated from field: double rotation = 5;
   */
  rotation = 0;

  constructor(data?: PartialMessage<Entity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.Entity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "message", T: Asset },
    { no: 3, name: "position", kind: "message", T: Vector2 },
    { no: 4, name: "scale", kind: "message", T: Vector2 },
    { no: 5, name: "rotation", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity {
    return new Entity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJsonString(jsonString, options);
  }

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean {
    return proto3.util.equals(Entity, a, b);
  }
}

/**
 * @generated from message screens.v1.Asset
 */
export class Asset extends Message<Asset> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset {
    return new Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJsonString(jsonString, options);
  }

  static equals(a: Asset | PlainMessage<Asset> | undefined, b: Asset | PlainMessage<Asset> | undefined): boolean {
    return proto3.util.equals(Asset, a, b);
  }
}

/**
 * @generated from message screens.v1.Vector2
 */
export class Vector2 extends Message<Vector2> {
  /**
   * @generated from field: double x = 1;
   */
  x = 0;

  /**
   * @generated from field: double y = 2;
   */
  y = 0;

  constructor(data?: PartialMessage<Vector2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "screens.v1.Vector2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "y", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vector2 {
    return new Vector2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vector2 {
    return new Vector2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vector2 {
    return new Vector2().fromJsonString(jsonString, options);
  }

  static equals(a: Vector2 | PlainMessage<Vector2> | undefined, b: Vector2 | PlainMessage<Vector2> | undefined): boolean {
    return proto3.util.equals(Vector2, a, b);
  }
}

